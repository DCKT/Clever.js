{"name":"Smart.js","tagline":"A clever lightweight Node.js web framework.","body":"Smart.js\r\n=========\r\n\r\n## What is Smart.js ?\r\n\r\nSmart is a clever lightweight web framework for building web application quickly. He is inspired from the Ember.js conventions, you just need to pass some routes to the application and Smart will search the Controller (if it exists) and the view associated.\r\nSmart use Handlebars as template engine and can handle SCSS.\r\n\r\n\r\n## Example\r\n```javascript\r\nvar http = require('http'),\r\nSmart    = require('smartjs');\r\n\r\nSmart.Router.map(\"/hello\", \"/posts/new\");\r\n\r\nhttp.createServer(function(request, response) {\r\n  Smart.Router.manage(request, response);\r\n}).listen(3000);\r\n\r\nconsole.log(\"Server launched on localhost:3000 ...\");\r\n```\r\n\r\nHere, we create a route **/hello**, Smart will look in **app/controllers/Hello.js** and render **app/views/Hello.hbs**\r\nIf the controller is not found, Smart will handle the case and render the template normaly.\r\n\r\n#### Nested routes\r\nWhen you need to register routes like **/posts/new** or something like this, Smart will look for **PostsNew** file.\r\n\r\nNotice, we don't defined an index route, indeed, this is a common case for all web application so it implicitly add to your current routes, and it will look for the index.hbs template.\r\n\r\nActually, a controller looks like this :\r\n```javascript\r\nvar controller = require('smartjs').Controller;\r\n\r\nmodule.exports = controller.extend(function(req, res) {\r\n  res.send({id: req.params.id});\r\n});\r\n\r\n```\r\nThe data passed with the **send** method only accept objects. \r\n\r\n#### GET parameters\r\nIf the URL requested has some parameters, you can use **req.query** followed by the name of the parameters. Example :\r\n```javascript\r\n// http://localhost:3000?name=DCK&id=1\r\nreq.query.name; // 'DCK'\r\nreq.query.id; // 1\r\n```\r\n\r\nIf you enter a nonexistent URL, Smart will send a 404 error page (in **./app/views/global/404.hbs**).\r\n\r\n#### URL parameters\r\nYou can register a route by specifing an identifier with a colon like : `/posts/:id`. \r\nThen you will find in the controller the variable **req.params** who contained an object, here **req.params.id**.\r\n```javascript\r\n// URL registered: http://localhost:3000/posts/:id\r\n// http://localhost:3000/posts/1\r\nreq.params.id; // 1\r\n```\r\n\r\n## ASAP\r\n- Set custom headers and HTTP Code for controller\r\n- HTTP method for controller (GET / POST / PUT / DELETE)\r\n- smart-cli (generate smart project)\r\n\r\n### LICENCE\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2014 Thomas Deconinck\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n","google":"UA-52385202-1","note":"Don't delete this file! It's used internally to help with page regeneration."}